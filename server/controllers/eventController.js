import mongoose from "mongoose";
import Event from "../models/Event.js";
import EventDetails from "../models/EventDetails.js";
import { dummyEventsData } from "../data/dummyEventsData.js";

// ========================
// Seed database with dummy events
// ========================
export const seedDummyEvents = async () => {
  try {
    await Event.deleteMany({});
    await EventDetails.deleteMany({});

    // Transform dummy data to use proper ObjectIds and remove any existing IDs
    const transformedData = dummyEventsData.map((event) => {
      const { _id, id, ...eventData } = event; // Remove any existing _id and id fields
      return eventData; // Let MongoDB generate proper ObjectId
    });

    console.log("📝 Seeding events with transformed data..."); // DEBUG LOG
    const insertedEvents = await Event.insertMany(transformedData);
    console.log("✅ Inserted events with proper ObjectIds:", insertedEvents.map(e => e._id)); // DEBUG LOG

    const eventDetailsData = insertedEvents.map((event) => {
      // 1. Handle event_date
      const date =
        event.event_date && !isNaN(new Date(event.event_date))
          ? new Date(event.event_date)
          : new Date();

      // 2. Handle price -> number
      let numericPrice = 0;
      if (event.price) {
        if (typeof event.price === "string") {
          numericPrice = Number(event.price.replace(/[^\d]/g, "")); // strip "KSH "
        } else if (typeof event.price === "number") {
          numericPrice = event.price;
        }
      }

      return {
        eventId: event._id, // Use the proper ObjectId generated by MongoDB
        eventDateTime: date,
        eventPrice: numericPrice,
        ticketTypes: event.ticketPrices || {},
      };
    });

    await EventDetails.insertMany(eventDetailsData);

    console.log("✅ Dummy events + details reseeded successfully!");
    console.log("📊 Sample event ObjectIds:", insertedEvents.slice(0, 3).map(e => ({ title: e.title, _id: e._id })));
  } catch (error) {
    console.error("❌ Error seeding dummy events:", error);
  }
};

// ========================
// Fetch active events
// ========================
export const getNowActiveEvents = async (req, res) => {
  try {
    const events = await Event.find();
    console.log("📊 Fetched events sample:", events.slice(0, 2)); // DEBUG LOG - show first 2 events
    console.log("📊 First event _id type:", typeof events[0]?._id, "Value:", events[0]?._id); // DEBUG LOG
    return res.json({ success: true, events });
  } catch (error) {
    console.error("Error fetching events:", error.message);
    return res.status(500).json({ success: false, message: "Failed to fetch events" });
  }
};

// ========================
// Add new event
// ========================
export const addEvent = async (req, res) => {
  try {
    const { eventId, eventDateTime, eventPrice, ticketTypes } = req.body;
    
    console.log("📝 Add event request body:", req.body); // DEBUG LOG
    console.log("📝 Extracted values:", { eventId, eventDateTime, eventPrice, ticketTypes }); // DEBUG LOG

    // Validate required fields
    if (!eventId) {
      console.log("❌ Missing eventId"); // DEBUG LOG
      return res.status(400).json({ success: false, message: "Event ID is required" });
    }
    
    if (!eventDateTime) {
      console.log("❌ Missing eventDateTime"); // DEBUG LOG
      return res.status(400).json({ success: false, message: "Event date time is required" });
    }
    
    if (eventPrice === undefined || eventPrice === null || eventPrice === '') {
      console.log("❌ Missing eventPrice"); // DEBUG LOG
      return res.status(400).json({ success: false, message: "Event price is required" });
    }

    // Validate eventId format
    console.log("🔍 EventId type:", typeof eventId, "Value:", eventId, "Length:", eventId.length); // DEBUG LOG
    
    // Check if it's a valid ObjectId format (24 characters, hexadecimal)
    if (!mongoose.Types.ObjectId.isValid(eventId)) {
      console.log("❌ Invalid eventId format:", eventId); // DEBUG LOG
      return res.status(400).json({ 
        success: false, 
        message: `Invalid event ID format. Expected 24-character ObjectId, got: ${eventId}. Please reseed the database with proper ObjectIds.` 
      });
    }

    // Find the base event by ID
    const event = await Event.findById(eventId);
    console.log("🔍 Found event:", event ? { title: event.title, _id: event._id } : null); // DEBUG LOG
    
    if (!event) {
      console.log("❌ Event not found with ID:", eventId); // DEBUG LOG
      return res.status(404).json({ success: false, message: "Event not found" });
    }

    // Validate and parse eventDateTime
    const parsedDateTime = new Date(eventDateTime);
    if (isNaN(parsedDateTime.getTime())) {
      console.log("❌ Invalid eventDateTime:", eventDateTime); // DEBUG LOG
      return res.status(400).json({ success: false, message: "Invalid event date time" });
    }

    // Validate and parse eventPrice
    const parsedPrice = Number(eventPrice);
    if (isNaN(parsedPrice) || parsedPrice < 0) {
      console.log("❌ Invalid eventPrice:", eventPrice); // DEBUG LOG
      return res.status(400).json({ success: false, message: "Invalid event price" });
    }

    // Create a new EventDetails entry
    const newEventDetail = await EventDetails.create({
      eventId: eventId, // Use the validated ObjectId directly
      eventDateTime: parsedDateTime,
      eventPrice: parsedPrice,
      ticketTypes: ticketTypes || { advance: 0, vip: 0, student: 0 },
    });

    console.log("✅ Event details created:", newEventDetail); // DEBUG LOG

    return res.status(201).json({
      success: true,
      message: "Event added successfully",
      event: newEventDetail,
    });
  } catch (error) {
    console.error("❌ Error adding event:", error.message);
    console.error("❌ Error stack:", error.stack); // DEBUG LOG
    
    // Handle database-specific errors
    if (error.name === 'ValidationError') {
      return res.status(400).json({ 
        success: false, 
        message: "Validation error", 
        errors: Object.values(error.errors).map(e => e.message) 
      });
    }
    
    return res.status(500).json({ success: false, message: "Failed to add event" });
  }
};

// ========================
// Get all future events
// ========================
export const getEvents = async (req, res) => {
  try {
    const events = await EventDetails.find({
      eventDateTime: { $gte: new Date() },
    })
      .populate("eventId")
      .sort({ eventDateTime: 1 });

    // Filter unique events by ID
    const uniqueEvents = [];
    const seen = new Set();

    events.forEach((e) => {
      if (e.eventId && !seen.has(e.eventId._id.toString())) {
        seen.add(e.eventId._id.toString());
        uniqueEvents.push(e.eventId);
      }
    });

    return res.json({ success: true, events: uniqueEvents });
  } catch (error) {
    console.error("Error fetching events:", error.message);
    return res.status(500).json({ success: false, message: "Failed to fetch events" });
  }
};

// ========================
// Get a single event
// ========================
export const getEvent = async (req, res) => {
  try {
    const { eventId } = req.params;

    if (!eventId) {
      return res.status(400).json({ success: false, message: "Event ID is required" });
    }

    if (!mongoose.Types.ObjectId.isValid(eventId)) {
      return res.status(400).json({ success: false, message: "Invalid event ID format" });
    }

    const event = await Event.findById(eventId);
    if (!event) {
      return res.status(404).json({ success: false, message: "Event not found" });
    }

    const eventDetailsData = await EventDetails.find({
      eventId: new mongoose.Types.ObjectId(eventId),
      eventDateTime: { $gte: new Date() },
    }).sort({ eventDateTime: 1 });

    // Group showtimes by date
    const dateTime = {};
    eventDetailsData.forEach((show) => {
      const date = show.eventDateTime.toISOString().split("T")[0];
      if (!dateTime[date]) dateTime[date] = [];
      dateTime[date].push({ 
        time: show.eventDateTime, 
        eventId: eventId,
        eventDetailId: show._id,
        price: show.eventPrice,
        ticketTypes: show.ticketTypes
      });
    });

    return res.json({ success: true, event, dateTime });
  } catch (error) {
    console.error("Error fetching single event:", error.message);
    return res.status(500).json({ success: false, message: "Failed to fetch event" });
  }
};

// ========================
// Get active event details (events that have been added with dates/times/prices)
// ========================
export const getActiveEventDetails = async (req, res) => {
  try {
    const eventDetails = await EventDetails.find({
      eventDateTime: { $gte: new Date() }, // Only future events
    })
      .populate("eventId") // Populate with full event data
      .sort({ eventDateTime: 1 }); // Sort by date ascending

    console.log("📊 Found active event details:", eventDetails.length); // DEBUG LOG

    return res.json({ 
      success: true, 
      events: eventDetails 
    });
  } catch (error) {
    console.error("Error fetching active event details:", error.message);
    return res.status(500).json({ 
      success: false, 
      message: "Failed to fetch active event details" 
    });
  }
};

// ========================
// Delete an event detail
// ========================
export const deleteEvent = async (req, res) => {
  try {
    const { eventDetailId } = req.params;

    console.log("🗑️ Delete request for eventDetailId:", eventDetailId); // DEBUG LOG

    if (!eventDetailId) {
      return res.status(400).json({ 
        success: false, 
        message: "Event detail ID is required" 
      });
    }

    if (!mongoose.Types.ObjectId.isValid(eventDetailId)) {
      return res.status(400).json({ 
        success: false, 
        message: "Invalid event detail ID format" 
      });
    }

    const deletedEvent = await EventDetails.findByIdAndDelete(eventDetailId);
    
    if (!deletedEvent) {
      console.log("❌ Event detail not found:", eventDetailId); // DEBUG LOG
      return res.status(404).json({ 
        success: false, 
        message: "Event detail not found" 
      });
    }

    console.log("✅ Event detail deleted:", deletedEvent._id); // DEBUG LOG

    return res.json({
      success: true,
      message: "Event deleted successfully",
      deletedEvent: deletedEvent,
    });
  } catch (error) {
    console.error("❌ Error deleting event:", error.message);
    return res.status(500).json({ 
      success: false, 
      message: "Failed to delete event" 
    });
  }
};